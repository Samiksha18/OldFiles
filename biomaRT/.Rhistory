getBM(attributes=c("description", "chromosome_name"),
filters=filter, values=query, mart=ensembl)
query<-"GO:0000501"
filter<-"with_go_go"
getBM(attributes=c("description", "chromosome_name"),
filters=filter, values=query, mart=ensembl)
query<-"GO:0000501"
filter<-"with_go_go"
getBM(attributes="description", filters=filter, values=query, mart=ensembl)
c
query<-"GO:0000501"
filter<-"with_go_id"
getBM(attributes="description", filters=filter, values=query, mart=ensembl)
getBM(attributes="description", filters=list(filter, TRUE), values=query, mart=ensembl)
b<-getBM(attributes="description", filters=list(filter, TRUE), values=query, mart=ensembl)
b<-getBM(attributes="description", filters="with_go_id", values=query, mart=ensembl)
b<-getBM(attributes="description", filters="with_go_go", values=query, mart=ensembl)
c
query<-"GO:0005786"
filter<-"with_go_id"
b<-getBM(attributes="description", filters="with_go_go", values=query, mart=ensembl)
b<-getBM(attributes="description", filters="with_go_go", values=TRUE, mart=ensembl)
b
listMarts()
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
c<-listFilters(ensembl)
query<-"GO:0005786"
filter<-"with_go_id"
b<-getBM(attributes="description", filters="with_go_go", values=list(query,TRUE), mart=ensembl)
c
query<-"GO:0036349"
b<-getBM(attributes="description", filters="with_go_go", values=list(query,TRUE), mart=ensembl)
b<-getBM(attributes="description", filters="with_go_go", values=(query,TRUE), mart=ensembl)
b<-getBM(attributes="description", filters="with_go_go", values=(query=TRUE), mart=ensembl)
b
query
b<-getBM(attributes="description", filters="with_go_go", values="GO:0036349", mart=ensembl)
query<-"GO:0000016"
filter<-"with_go_id"
b<-getBM(attributes="description", filters="with_go_go", values=query, mart=ensembl)
query="GO:0000016"
filter<-"with_go_id"
b<-getBM(attributes="description", filters="with_go_go", values=query, mart=ensembl)
value
values
c
b<-getBM(attributes="description", filters="with_go_id", values=query, mart=ensembl)
b<-getBM(attributes="description", filters="with_go_id", values="actomyosin contractile ring contraction", mart=ensembl)
y
b<-getBM(attributes="description", filters="with_go_id", values=query, mart=ensembl)
b<-getBM(attributes="description", filters="go_id", values=query, mart=ensembl)
b
query="GO:0036349"
filter<-"with_go_id"
b<-getBM(attributes="description", filters="go_id", values=query, mart=ensembl)
b<-getBM(attributes="description", filters="go_id", values=query, mart=ensembl)
b
b<-getBM(attributes="description", filters="go_id", values="GO:0036349", mart=ensembl)
b<-getBM(attributes="description", filters="go_go", values="GO:0036349", mart=ensembl)
b<-getBM(attributes="description", filters="go_go", values="GO:0036349", mart=ensembl)c
c
b<-getBM(attributes="description", filters="go_id", values="GO:0036349", mart=ensembl)
ensemble
ensembl
b<-getBM(attributes="description", filters="go_id", values="GO:0036349", mart=ensembl)
b<-getBM(attributes=c("name", "description"), filters="go_id", values="GO:0036349", mart=ensembl)
c
listMarts()
ensembl = useMart("ensembl",dataset="ensembl")
ensembl
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
3
b<-getBM(attributes="description", filters="go_id", values="GO:0036349", mart=ensembl)
b<-getBM(attributes="description", filters="go_id", values="0036349", mart=ensembl)
b<-getBM(attributes=c("entrezgene", "description"), filters="go_id", values="0036349", mart=ensembl)
b<-getBM(attributes=c("entrezgene", "description"), filters="go_id", values="GO:0036349", mart=ensembl)
b<-getBM(attributes=c("entrezgene", "description"), filters="go_id", values=TRUE, mart=ensembl)
head(b)
b<-getBM(attributes=c("entrezgene", "description"), filters="with_go_id", values=TRUE, mart=ensembl)
head(b)
b<-getBM(attributes=c("entrezgene", "description", "go_id"), filters="with_go_id", values=TRUE, mart=ensembl)
head(b)
b<-getBM(attributes=c("entrezgene", "description", "go_id"), filters="with_go_id", values="GO:0019430", mart=ensembl)
b<-getBM(attributes=c("entrezgene", "description", "go_id"), filters="go_id", values="GO:0019430", mart=ensembl)
b
b<-getBM(attributes=c("entrezgene", "description", "go_id"), filters="go_id", values="GO:0036349", mart=ensembl)
?getBM
library("biomaRt")
listMarts()
a<-listDatasets("ensemble")
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
a<-listDatasets("ensemble")
a<-listDatasets("ensembl")
a<-listDatasets(ensembl)
a
b<-getBM(attributes="description", filters="go_id", values="GO:0036349", mart=ensembl)
b<-getBM(attributes="description", filters="go_id", values=TRUE, mart=ensembl)
b
b<-getBM(attributes="description", filters="with_go_id", values=TRUE, mart=ensembl)
b
b<-getBM(attributes="description", filters="go_id", values="GO:0006164", mart=ensembl)
install.packages("topGo")
install.packages("topGO")
source("http://bioconductor.org/biocLite.R")
biocLite("topGO")
library(topGO)
library(ALL)
biocLite("ALL")
library(ALL)
biocLite("ALL")
data(geneList)
data(ALL)
data(geneList)
data(ALL)
data(geneList)
<-read.cvs("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.R", "rU")
lst<-read.cvs("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.R", "rU")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.R", "rU")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.R")
lst
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.csv")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.csv", "rU")
lst<-read.csv('/Volumes/NICK3/R/data/topGO.csv', header=T,sep=",", row.names=1)
lst<-read.csv('/Volumes/NICK3/testGo.csv', header=T,sep=",", row.names=1)
lst
a<-data(ALL)
library(topGO)
library(ALL)
a<-data(ALL)
a
print(a)
data
data(geneList)
print(geneList)
head(geneList)
library("biomaRt")
listMarts()
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
a<-listDatasets(ensembl)
c<-listFilters(ensembl)
query="GO:0036349"
b<-getBM(attributes="description", filters="wikigene_name", values="CDC19", mart=ensembl)
b
query="CDC19"
b<-getBM(attributes="description", filters="wikigene_name", values=query, mart=ensembl)
b<-getBM(attributes="description", filters=filter2, values=query, mart=ensembl)
filter2<-"wikigene_name"
b<-getBM(attributes="description", filters=filter2, values=query, mart=ensembl)
listAttributes
listAttributes(ensembl)
head(listAttributes(ensembl), 20)
head(listAttributes(ensembl), 70)
b<-getBM(attributes=c("go_id", "name_1006", "definition_1006", "description"), filters=filter2, values=query, mart=ensembl)
b
source("http://bioconductor.org/biocLite.R")
biocLite("GOstats")
d<-listAttributes(ensembl)
write.csv(d, file = "attr_list.csv")
e<-getBM(attributes=c("entrezgene", "description"), filters=filter2, values=query, mart=ensembl)
e
ids<-(851193, 851195, 851196)
ids<-[851193, 851195, 851196]
ids<-851193, 851195, 851196
ids<-list(851193, 851195, 851196)
ids
ids<-vecort(851193, 851195, 851196)
ids<-vector(851193, 851195, 851196)
ids<-list(851193, 851195, 851196)
library(GOstats)
ids<-list(851193, 851195, 851196)
f<-GOHyperG(ids, lib="YEAST", what="MF", universe=NULL)
f<-hyperGTest(ids, lib="YEAST", what="MF", universe=NULL)
?hyper
??hyper
?hyperGTest
?GOHyperGParams
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=entrezUniverse)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=NULL)
ids<-unlist(851193, 851195, 851196)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=NULL)
hyperGTest(params)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, lib="Yeast", universeGeneIds=NULL)
geneList<-getBM(attributes="wikigene_name", filters=filter, values=TRUE, mart=ensembl)
geneList
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=geneList)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=unlist(geneList))
geneList<-getBM(attributes="entrezgene", filters=filter, values=TRUE, mart=ensembl)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=unlist(geneList))
ids
ids<-unlist(c(851193, 851195, 851196))
ids
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=unlist(geneList))
unlist(geneList)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=list(geneList))
list(geneList)
params<-new("GOHyperGParams", ontology="BP", geneIds=ids, universeGeneIds=unlist(list(geneList)))
str(geneList)
library(topGO)
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/topGO.csv")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGO.csv")
head(lst)
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGOgene.csv")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGOGene.csv")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGoGene.csv")
head(lst)
go<-lst$GO.ID
pval<-lst$p.value
gen<-List.of.Genes
gen<-lst$List.of.Genes
?annotationFun
??annotationFun
?annFUN.db
biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
genome <- BSgenome.Scerevisiae.UCSC.sacCer1
BSgenome.Scerevisiae.UCSC.sacCer1
biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
genome <- BSgenome.Scerevisiae.UCSC.sacCer1
geneList<-getBM(attributes=c("entrezgene, go_id, wikigenes_name"), filters=filter, values=TRUE, mart=ensembl)
geneList<-getBM(attributes=c("entrezgene, go_id, wikigene_name"), filters=filter, values=TRUE, mart=ensembl)
geneList<-getBM(attributes=c("entrezgene", "go_id", "wikigene_name"), filters=filter, values=TRUE, mart=ensembl)
geneList<-getBM(attributes=c("entrezgene", "go_id"), filters=filter, values=TRUE, mart=ensembl)
?annFun.gene2GO
?GOHyperParams
??GOHyperParams
??topGOdata
mapping="BSgenome.Scerevisiae.UCSC.sacCer1", ID = "entrez") )
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology=BP, allGenes=geneList, nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
library(topGO)
tgd<-new("topGOdata", ontology=BP, allGenes=geneList, nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology="BP", allGenes=geneList, nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology="BP", allGenes=list(geneList), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
geneList
g<-getBM(attributes="entrezgene", filters=filter2, values=gen, mart=ensembl)
g
tgd<-new("topGOdata", ontology="BP", allGenes=g, nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology="BP", allGenes=list(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology="BP", allGenes=unlist(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
source("http://bioconductor.org/biocLite.R")
biocLite("org.MeSH.Sce.S288c.db")
library(org.MeSH.Sce.S288c.db)
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGoGene.csv")
go<-lst$GO.ID
pval<-lst$p.value
gen<-lst$List.of.Genes
filter2<-"wikigene_name"
g<-getBM(attributes="entrezgene", filters=filter2, values=gen, mart=ensembl)
go<-lst$GO.ID
pval<-lst$p.value
gen<-lst$List.of.Genes
tgd<-new("topGOdata", ontology="BP", allGenes=unlist(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
tgd<-new("topGOdata", ontology="MF", allGenes=unlist(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
?conn
??conn
data(org.MeSH.Sce.S288c.db)
data("org.MeSH.Sce.S288c.db")
library(org.MeSH.Sce.S288c.db)
library(org.MeSH.Sce.S288c.db)
tgd<-new("topGOdata", ontology="MF", allGenes=unlist(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
datb <- paste(annotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
datb <- paste(annotation("org.MeSH.Sce.S288c.db"), "db", sep = ".")
data(org.MeSH.Sce.S288c.db)
library(org.MeSH.Sce.S288c.db)
datb <- paste(annotation(org.MeSH.Sce.S288c.db"), "db", sep = ".")
datb <- paste(annotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
data(org.MeSH.Sce.S288c.db)
library(org.MeSH.Sce.S288c.db); data(org.MeSH.Sce.S288c.db)
dbconn(org.MeSH.Sce.S288c.db)
datb <- paste(annotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
tgd<-new("topGOdata", ontology="MF", allGenes=unlist(g), nodeSize=1,
annFUN.org(whichOnto="BP", feasibleGenes = NULL, mapping="org.MeSH.Sce.S288c.db", ID = "entrez") )
datb <- paste(annotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
datb <- paste(meshAnnotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
ls("package:meshr")
meshr
install.packages("meshr")
biocLite("meshr")
library(meshr)
datb <- paste(meshAnnotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
library("AnnotationForge", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?AnnotationForge
??AnnotationForge
detach("package:MeSHDbi", unload=TRUE)
detach("package:org.Hs.eg.db", unload=TRUE)
org.Hs.eg_dbconn
library(topGO)
library(ALL)
data(ALL)
head(ALL)
data(geneList)
geneList
head(geneList)
head(geneList, 10)
print(geneList)
annotation(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
affyLib
library(package = affyLib, character.only = TRUE)
datb <- paste(annotation(org.MeSH.Sce.S288c.db), "db", sep = ".")
library(GOStats)
library(GOtats)
library(GOstats)
go
gen
testgo<-getBM(attributes=c(filter2, "go_id"), filters=filter2, values=testlst, mart=ensembl)
library("biomaRt")
library(GOstats)
testgo<-getBM(attributes=c(filter2, "go_id"), filters=filter2, values=testlst, mart=ensembl)
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
data<-listDatasets(ensembl)
filt<-listFilters(ensembl)
attr<-listAttributes(ensembl)
query="CDC19"
testlst<-c("CDC15", "CDC16", "CDC17", "CDC18", "CDC19")
filter<-"go_id"
filter2<-"wikigene_name"
testgo<-getBM(attributes=c(filter2, "go_id"), filters=filter2, values=testlst, mart=ensembl)
testgo
library(topGO)
geneList<-getBM(attributes=c("entrezgene", "go_id"), filters=filter, values=TRUE, mart=ensembl)
geneList
geneList<-getBM(attributes=c("entrezgene", "go_id"), filters=filter2, values=TRUE, mart=ensembl)
head(geneList)
geneList<-getBM(attributes=c("entrezgene", "go_id"), filters="with_go", values=TRUE, mart=ensembl)
filt
geneList<-getBM(attributes=c("entrezgene", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
geneList<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
head(geneList)
tgd<-new("topGOdata", ontology="BP", allGenes=geneList, nodeSize=1, description = "Ensembl GO enrichment",
annot = annFUN.gene2GO, gene2GO =testgo)
tgd<-new("topGOdata", ontology="CC", allGenes=geneList, nodeSize=1, description = "Ensembl GO enrichment",
annot = annFUN.gene2GO, gene2GO =testgo)
geneList
testGo
testgo
genelist<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
geneToGo<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
testgo
testList<-<- factor(as.integer(testlst %in% testlst))
testList<- factor(as.integer(testlst %in% testlst))
testList
names(testList)<-testlst
testList
testList<- factor(as.integer(testlst !="CDC19"))
testList
names(testList)<-testlst
testList
head(geneToGo)
names(geneToGo)
testList
GOdata <- new("topGOdata", ontology = "MF", allGenes = geneList,
+ annot = annFUN.gene2GO, gene2GO = geneToGo)
GOdata <- new("topGOdata", ontology = "MF", allGenes = geneList, annot = annFUN.gene2GO, gene2GO = geneToGo)
str(testList)
GOdata <- new("topGOdata", ontology = "MF", allGenes = testList, annot = annFUN.gene2GO, gene2GO = geneToGo)
head(geneToGo)
gene.to.GO <- split(geneToGo$go_id, geneToGo$wikigene_name)
geneToGO <- lapply(gene.to.GO, unique)  # to remove duplicates
geneToGO
geneToGo?<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
geneToGo<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
gene.to.GO <- split(geneToGo?$go_id, geneToGo$wikigene_name)
gene.to.GO <- split(geneToGo$go_id, geneToGo$wikigene_name)
geneToGO <- lapply(gene.to.GO, unique)  # to remove duplicates
GOdata <- new("topGOdata", ontology = "MF", allGenes = testList, annot = annFUN.gene2GO, gene2GO = geneToGo)
write.csv(geneToGO, file = "attr_list.csv")
write.csv(geneToGO, file = "sacc_list.csv")
?write.csv
row.names(geneToGO)
rownames(geneToGO)
colnames(geneToGO)
cnames(geneToGO)
names(geneToGO)
head(names(geneToGO)
)
str(geneToGO)
mmmmm<-data.frame(geneToGO)
?list
GOdata <- new("topGOdata", ontology = "MF", allGenes = testList, annot = annFUN.gene2GO, gene2GO = geneToGO)
str(GOdata)
GOdata
graph(GOdata)
print(graph(GOdata))
write.csv(geneToGO, file = "sacc_list.csv", na="NA")
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGoGene.csv")
lst
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
library(biomaRt)
library(GOstats)
library(topGO)
ensembl = useMart("ensembl",dataset="scerevisiae_gene_ensembl")
data<-listDatasets(ensembl)
filt<-listFilters(ensembl)
attr<-listAttributes(ensembl)
query="CDC19"
testlst<-c("CDC15", "CDC16", "CDC17", "CDC18", "CDC19")
filter<-"go_id"
filter2<-"wikigene_name"
b<-getBM(attributes=c("entrezgene", "go_id", "name_1006"), filters=filter2, values=lst, mart=ensembl)
e<-getBM(attributes=c("entrezgene", "description"), filters=filter2, values=query, mart=ensembl)
testgo<-getBM(attributes=c(filter2, "go_id"), filters=filter2, values=testlst, mart=ensembl)
geneToGo<-getBM(attributes=c("wikigene_name", "go_id"), filters="with_go_go", values=TRUE, mart=ensembl)
gene.to.GO <- split(geneToGo$go_id, geneToGo$wikigene_name)
geneToGO <- lapply(gene.to.GO, unique)  # to remove duplicates
write.csv(geneToGO, file = "sacc_list.csv", na="NA")
#####################
library(topGO)
lst<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/testGoGene.csv")
go<-lst$GO.ID
pval<-lst$p.value
gen<-lst$List.of.Genes
filter2<-"wikigene_name"
g<-getBM(attributes="entrezgene", filters=filter2, values=gen, mart=ensembl)
GOdata <- new("topGOdata", ontology = "MF", allGenes = testList, annot = annFUN.gene2GO, gene2GO = geneToGO)
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")
resultFisher
geneToGO
library(biomaRt)
library(GOstats)
library(topGO)
listMarts()
listMarts()
ensembl = useMart("ensembl", dataset="scerevisiae_gene_ensembl")
data<-listDatasets(ensembl)
filt<-listFilters(ensembl)
attr<-listAttributes(ensembl)
data
listMarts()
ensembl = useMart("ensembl", dataset="fungi_mart_25")
ensembl = useMart("ensembl", dataset="fungi_Mart_25")
ensembl = useMart("ensembl", dataset="fungi_mart_25")
ensembl = useMart("fungi_mart_25")#, dataset="fungi_Mart_25")
data<-listDatasets(ensembl)
data
useMarts()
listMarts()
db<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/CAdb.csv")
head(db)
?for
??
??for
)
?count
??count
?length
db<-read.csv("/Users/nicholaswaters/Documents/GU_R/biomaRT/CAdb.csv")
for row in db{
if length(grep(pattern = "orf19.*", x = row, ignore.case = TRUE, perl = TRUE, value = TRUE))=1:
db$orf19a<-grep(pattern = "orf19.*", x = row, ignore.case = TRUE, perl = TRUE, value = TRUE))
for row in db{
if length(grep(pattern = "orf19.*", x = row, ignore.case = TRUE, perl = TRUE, value = TRUE))=1:
db$orf19a<-grep(pattern = "orf19.*", x = row, ignore.case = TRUE, perl = TRUE, value = TRUE)
}
for row in db{
head(db)
head(row.names(db))
db[1]
db[,1]
db[1,]
for (i in row.names(db)){
if length(grep(pattern = "orf19.*", x = db[i,], ignore.case = TRUE, perl = TRUE, value = TRUE))=1:
for (i in row.names(db)){
if (length(grep(pattern = "orf19.*", x = db[i,], ignore.case = TRUE, perl = TRUE, value = TRUE))=1){
for (i in row.names(db)){
if (length(grep(pattern = "orf19.*", x = db[i,], ignore.case = TRUE, perl = TRUE, value = TRUE))==1){
db$orf19a<-grep(pattern = "orf19.*", x = row, ignore.case = TRUE, perl = TRUE, value = TRUE)
}
else{
print("error: you've been duped by duplicates!")}
}
length(grep(pattern = "orf19.*", x = db[1,], ignore.case = TRUE, perl = TRUE, value = TRUE))
length(grep(pattern = "orf19.+", x = db[1,], ignore.case = TRUE, perl = TRUE, value = TRUE))
length(grep(pattern = "orf19.+", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE))
length(grep(pattern = "orf19....(..)?", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE))
db[2,]
grep(pattern = "orf19....(..)?", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19....?", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19....", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
?grep
grep(pattern = "orf19", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19", x = db[2,], ignore.case = TRUE, perl = TRUE, value = TRUE)
str(db[2,])
list((db[2,]))
grep(pattern = "orf19", x = list(db[2,]), ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19", x = unlist(db[2,]), ignore.case = TRUE, perl = TRUE, value = TRUE)
grep(pattern = "orf19", x = list(db[2,]), ignore.case = TRUE, perl = TRUE, value = TRUE)
library(biomaRt)
listMarts()
ensembl = useMart("ensembl", dataset="scerevisiae_gene_ensembl")
data<-listDatasets(ensembl)
data
listMarts()
ensembl = useMart("biomart")#, dataset="scerevisiae_gene_ensembl")
data<-listDatasets("biomart")
data<-listDatasets(ensembl)
data
install.packages("gseabase")
library(biomaRt)
library(GOstats)
library(topGO)
listMarts()
